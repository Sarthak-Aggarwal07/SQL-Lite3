AGGREGATE FUNCTION:
Similar to a pivot table in excel. 
count - count the no of rows | sum | min/max | avg
sum, avg can be used only on numeric values | max/min, count can be used on both numeric and non numeric values. 
------------------------------------------------------------------------------
-COUNT: 
count(*) finds the total no of rows | count(col1) finds the total number of rows in which col1 is not null. 
If there is a space between the words in column name , then " " is to be used - as “sum of values” | ' '  doesn't work 
------------------------------------------------------------------------------
-SUM:
sum(col1) sums the values across all rows in col1.
------------------------------------------------------------------------------	
-MIN/MAX:
min used to retrieve the lowest no, alphabetical ordered word, or minimum date | max used to do the opposite 
What was the highest single-day increase in Apple's share value?
\
select max((close - open)) as highest_difference
from tutorial.aapl_historical_stock_price
\
------------------------------------------------------------------------------
-AVG:
Ignores null completely - avg of 2, 4, NULL should have been 2 but it is 3 | To prevent it from happening, can change the null values to 0. 
\
select avg(volume)
from tutorial.aapl_historical_stock_price
\
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
GROUP BY:
Aggregate functions mentioned above aggregates the whole table and return a one cell output. 
Using groupby will aggregate different groups in the table and return multiple cells output | Can mention multiple criterias too in group by - group by a,b 
Group by is to be used along with aggregation such as count, sum, max, min or avg 
Calculate the total number of shares traded each month. Order your results chronologically.
\
select year,month, sum(volume)
from tutorial.aapl_historical_stock_price
group by year, month
order by year, month
\
If limit 10 is given at the end of the previous problem, it will aggregate the whole table but provide the output limited to only 10 rows. 
Write a query to calculate the average daily price change in Apple stock, grouped by year.
\
select year, avg(close-open)
from tutorial.aapl_historical_stock_price
group by year
\
Write a query that calculates the lowest and highest prices that Apple stock achieved each month.
\
select year, month, max(high) as highest_price, min(high) as lowest_price
from tutorial.aapl_historical_stock_price
group by year, month
order by 1, 2
\
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
HAVING:
Filtering based on condition in aggregated columns. 
Order of code -> select - from - where - group by - having - order by 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
CASE:
If else logic in sql to create a new column in the query
Order of code -> case - when - then - else - end as 
When the year is ‘SR’, then ‘Yes’, else a null value. 
\
select
  	player_name,
  	year,
  	case when year = 'SR' then 'Yes'
  	else NULL
  	end as SR_status
from benn.college_football_players
\
To post a null value, it is enough to mention null | While finding based on a condition, need to mention is null or is not null
Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first.
\
select player_name, state,
   	case when state = 'CA' then 'yes'
   	else NULL
   	end as CA_status
from benn.college_football_players
order by CA_status
#Ordering by a column derived from the case statement.
\
Write a query that includes players' names and a column that classifies them into four categories based on height. Keep in mind that the answer we provide is only one of many possible answers, since you could divide players' heights in many ways.
\
select player_name,
   	height,
   	case when height > 90 then 'Very Tall'
   	when height > 80 and height <= 90 then 'Tall'
   	when height >75 and height <= 80 then 'Above Average'
   	when height >70 and height <= 75 then 'Average'
   	else 'Below Average'
   	end as height_status
from benn.college_football_players
#Comparison conditions to be given from the highest value and then lower values. Can give multiple conditions using conditional operators - and, or.
\
Write a query that selects all columns from benn.college_football_players and adds an additional column that displays the player's name if that player is a junior or senior.
\
select *,
   	case when year in ('SR','JR') then player_name
   	else null
   	end as name_year_status
from benn.college_football_players
\
select case
   	when year = 'FR' then 'FR'
   	when year = 'JR' then 'JR'
   	when year = 'SR' then 'SR'
   	when year = 'SO' then 'SO'
   	else 'No_data'
   	end as FR_Status,
   	count(1) as count
from benn.college_football_players
group by FR_status
#Pairing the case statement with aggregate function such as group by 
\
Write a query that counts the number of 300lb+ players for each of the following regions: West Coast (CA, OR, WA), Texas, and Other (everywhere else).
\
select case when state in ('CA','OR','WA') then 'West_Coast'
   	when state = 'TX' then 'Texas'
   	else 'Others'
   	end as state_status,
   	count(*)
from benn.college_football_players
where weight >= 300
group by state_status
#No need to give the column name inside ' ' after end as 
\
Write a query that calculates the combined weight of all underclass players (FR/SO) in California as well as the combined weight of all upperclass players (JR/SR) in California.
\
select case when year in ('FR','SO') then 'Underclass'
        	when year in ('JR','SR') then 'Upperclass'
        	end as class_status,
   	sum(weight)
from benn.college_football_players
where state = 'CA'
group by class_status
#Values arranged horizontally similar to a pivot table | If more columns needed, it can ne added in select statement following ,    
\
select count(case when year in ('FR','SO') then 1 else 0 end) as Underclass,
   	count(case when year in ('JR','SR') then 1 else 0 end) as Upperclass
from benn.college_football_players
#Giving case inside the count statement
\
Write a query that displays the number of players in each state, with FR, SO, JR, and SR players in separate columns and another column for the total number of players. Order results such that states with the most players come first.
\
select state,
   	count(case when year = 'FR' then 1 else null end) as FR_count,
   	count(case when year = 'JR' then 1 else null end) as JR_count,
   	count(case when year = 'SO' then 1 else null end) as SO_count,
   	count(case when year = 'SR' then 1 else null end) as SR_count,
   	count(*) as total_player
from benn.college_football_players
group by 1
order by 6 desc
\
select case when full_school_name < 'N' then 'A_M'
        	when full_school_name >= 'N' then 'N_Z'
        	end as schoolname_status,
  	count(*)
from benn.college_football_players
group by schoolname_status
#No need to give comma between the cases statements | No need to give ‘ ‘ for the end as column name in case statement 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
DISTINCT:
select distinct month will give all the distinct months | select distinct month, year will give all distinct pairs of month and year
Distinct generally used in tandem with count 
Write a query that counts the number of unique values in the month column for each year.
\
select year, count(distinct month)
from tutorial.aapl_historical_stock_price
group by year
\
Write a query that separately counts the number of unique values in the month column and the number of unique values in the `year` column.
\
select count(distinct month) as unique_month, count(distinct year) as unique_year
from tutorial.aapl_historical_stock_price
\
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
JOINS:
Joining multiple tables
Mapping between two tables using 'on' on the join keys/foreign keys 
Alias for table 1 as t1 and table 2 as t2 | t1.* will select all columns from t1
------------------------------------------------------------------------------
INNER JOIN:
Returns only the matching rows from both the tables
------------------------------------------------------------------------------
OUTER JOIN:
Returns both matched and unmatched rows from both the tables
------------------------------------------------------------------------------
LEFT JOIN:
Returns all rows from the left table and the matched rows from the right table
------------------------------------------------------------------------------
RIGHT JOIN:
Returns all rows from the right table and the matched rows from the left table
Write a query that displays player names, school names and conferences for schools in the "FBS (Division I-A Teams)" division.
\
select p.player_name,
   	p.school_name,
   	t.conference
from benn.college_football_players p
join benn.college_football_teams t
on p.school_name = t.school_name
where division = 'FBS (Division I-A Teams)' 
\
Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table and the tutorial.crunchbase_companies table, but instead of listing individual rows, count the number of non-null rows in each table.
\
select count(c.permalink), count(a.company_permalink)
from tutorial.crunchbase_companies c
join tutorial.crunchbase_acquisitions a
on c.permalink = a.company_permalink
\
Count the number of unique companies (don't double-count companies) and unique acquired companies by state. Do not include results for which there is no state data, and order by the number of acquired companies from highest to lowest.
\
select c.state_code,
   	count(distinct(c.permalink)) as unique_companies,
   	count(distinct(a.company_permalink)) as unique_acquiring_companies
from tutorial.crunchbase_companies c
full join tutorial.crunchbase_acquisitions a
on c.permalink = a.company_permalink
where c.state_code is not null
group by 1
order by 3 desc
\
